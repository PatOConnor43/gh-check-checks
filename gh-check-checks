#!/usr/bin/env bash
set -e

stat .git &> /dev/null
if [[ $? -ne 0 ]]; then
  echo "Not in a GitHub repository" >&2
  exit 1
fi

repo=`gh repo view --json url --jq '.url'`
if [[ ! $repo == https://github.com* ]] ; then
  echo "Not in a GitHub repository" >&2
  exit 1
fi

repo=`echo $repo | sed 's@https://github.com/@@'`
commit=`git rev-parse HEAD`

exec gh api \
  -H "Accept: application/vnd.github+json" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  /repos/$repo/commits/$commit/check-runs --jq '
  {
      successCount: [.check_runs[] |
          select(.conclusion == "success"),
          select(.conclusion == "skipped"),
          select(.conclusion == "neutral")] | length,
      failedCount:  [.check_runs[] |
          select(.conclusion == "failure"),
          select(.conclusion == "action_required"),
          select(.conclusion == "cancelled"),
          select(.conclusion == "timed_out"),
          select(.conclusion == "stale")] | length,
      runningCount:  [.check_runs[] | select(.status != "completed")] | length,
      commit: "'''$commit'''",
      repository: "'''$repo'''",
  }'

# Snippets to help get started:

# Determine if an executable is in the PATH
# if ! type -p ruby >/dev/null; then
#   echo "Ruby not found on the system" >&2
#   exit 1
# fi

# Pass arguments through to another command
# gh issue list "$@" -R cli/cli

# Using the gh api command to retrieve and format information
# QUERY='
#   query($endCursor: String) {
#     viewer {
#       repositories(first: 100, after: $endCursor) {
#         nodes {
#           nameWithOwner
#           stargazerCount
#         }
#       }
#     }
#   }
# '
# TEMPLATE='
#   {{- range $repo := .data.viewer.repositories.nodes -}}
#     {{- printf "name: %s - stargazers: %v\n" $repo.nameWithOwner $repo.stargazerCount -}}
#   {{- end -}}
# '
# exec gh api graphql -f query="${QUERY}" --paginate --template="${TEMPLATE}"
